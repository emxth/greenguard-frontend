// import React, { useState, useEffect } from "react";
// import axios from "axios";
// import BackBtn from "../TruckManagement/Components/BackBtn";
// import { useNavigate } from "react-router-dom";
// import "./styles/ViewFuelCost.css";
// import jsPDF from "jspdf";
// import autoTable from "jspdf-autotable";

// function ViewFuelCost() {
//     const [truckFuelCosts, setTruckFuelCosts] = useState([]);
//     const [loading, setLoading] = useState(true);
//     const [error, setError] = useState(null);

//     const navigate = useNavigate();

//     useEffect(() => {
//         axios.get("http://localhost:8080/FuelCost/getAllFuelCost")
//             .then((response) => {
//                 setTruckFuelCosts(response.data);
//                 setLoading(false);
//             })
//             .catch((err) => {
//                 console.error("Error fetching truck Fuel costs:", err);
//                 setError("Failed to load truck fuel costs. Please try again.");
//                 setLoading(false);
//             });
//     }, []);

//     function deleteFuelCost(fuelId, regNum) {
//         if (window.confirm(`Are you sure you want to delete Fuel cost with Reg Number: ${regNum}?`)) {
//             axios.delete(`http://localhost:8080/FuelCost/deleteFuelCost/${fuelId}`)
//                 .then(() => alert("Fuel cost deleted successfully!"))
//                 .catch((error) => {
//                     console.error("Error deleting Fuel cost:", error);
//                     alert("Failed to delete cost.");
//                 });
//         }
//     }

//     if (loading) return <p>Loading truck costs...</p>;
//     if (error) return <p className="fuelError">{error}</p>;

//     function EditCost(costID) {
//         console.log(costID);
//         navigate(`/EditFuelCost/${costID}`);
//     }

//     function handleGenerateFuelCostPDF() {
//         const doc = new jsPDF();
//         doc.text("Fuel Cost Report", 14, 15);

//         const tableColumn = ["Truck Number", "Fuel Date", "Fuel Type", "Fuel Cost", "Litres", "Status"];
//         const tableRows = truckFuelCosts.map(cost => ([
//             cost.Truck_RegNum,
//             cost.Fuel_Date,
//             cost.FuelType,
//             cost.FuelCost,
//             cost.Litres,
//             cost.Status
//         ]));

//         autoTable(doc, {
//             head: [tableColumn],
//             body: tableRows,
//             startY: 20,
//             styles: {
//                 fontSize: 10,
//                 textColor: [33, 33, 33],
//                 lineColor: [200, 200, 200],
//                 lineWidth: 0.1,
//             },
//             headStyles: {
//                 fillColor: [0, 102, 204],
//                 textColor: [255, 255, 255],
//                 fontSize: 11,
//                 halign: 'center',
//             },
//             alternateRowStyles: {
//                 fillColor: [245, 245, 245],
//             },
//             margin: { top: 20 },
//             didDrawPage: function (data) {
//                 doc.setFontSize(10);
//                 doc.setTextColor(150);
//                 doc.text("Generated by E-Waste Fuel Tracker", data.settings.margin.left, doc.internal.pageSize.height - 10);
//             },
//         });

//         doc.save("Fuel_Cost_Report.pdf");
//     }

//     return (
//         <div className="fuelContainer">
//             <div className="fuelHeaderSection">
//                 <BackBtn />
//                 <h2 className="fuelTitle">Truck Fuel Cost Details</h2>
//             </div>

//             <table className="fuelCostTable">
//                 <thead>
//                     <tr>
//                         <th className="fuelHeader">Truck Number</th>
//                         <th className="fuelHeader">Fuel Date</th>
//                         <th className="fuelHeader">Fuel Type</th>
//                         <th className="fuelHeader">Fuel Cost</th>
//                         <th className="fuelHeader">Litres</th>
//                         <th className="fuelHeader">Status</th>
//                         <th className="fuelHeader">Action</th>
//                     </tr>
//                 </thead>
//                 <tbody>
//                     {truckFuelCosts.length > 0 ? (
//                         truckFuelCosts.map((FuelCost) => (
//                             <tr key={FuelCost._id}>
//                                 <td>{FuelCost.Truck_RegNum}</td>
//                                 <td>{FuelCost.Fuel_Date}</td>
//                                 <td>{FuelCost.FuelType}</td>
//                                 <td>{FuelCost.FuelCost}</td>
//                                 <td>{FuelCost.Litres}</td>
//                                 <td className="fuelStatusCell">{FuelCost.Status}</td>
//                                 <td>
//                                     <button className="fuelCostEditBtn" onClick={() => EditCost(FuelCost._id)}>Edit</button>
//                                     <button className="fuelDeleteBtn" onClick={() => deleteFuelCost(FuelCost._id, FuelCost.Truck_RegNum)}>
//                                         Delete
//                                     </button>
//                                 </td>
//                             </tr>
//                         ))
//                     ) : (
//                         <tr>
//                             <td colSpan="7" className="fuelNoData">No costs found.</td>
//                         </tr>
//                     )}
//                 </tbody>
//             </table>
//             <button className="VF-generateBtn2" onClick={handleGenerateFuelCostPDF}>Generate Report</button>
//             <button className="VF-generateBtn3" >Generate past 1 month Report</button>
//         </div>
//     );
// }

// export default ViewFuelCost;


import React, { useState, useEffect } from "react";
import axios from "axios";
import BackBtn from "../TruckManagement/Components/BackBtn";
import { useNavigate } from "react-router-dom";
import "./styles/ViewFuelCost.css";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

function ViewFuelCost() {
    const [truckFuelCosts, setTruckFuelCosts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const navigate = useNavigate();

    //Get all fuel costs
    useEffect(() => {
        axios.get("http://localhost:8080/FuelCost/getAllFuelCost")
            .then((response) => {
                setTruckFuelCosts(response.data);
                setLoading(false);
            })
            .catch((err) => {
                console.error("Error fetching truck Fuel costs:", err);
                setError("Failed to load truck fuel costs. Please try again.");
                setLoading(false);
            });
    }, []);

    //Delete costs
    function deleteFuelCost(fuelId, regNum) {
        if (window.confirm(`Are you sure you want to delete Fuel cost with Reg Number: ${regNum}?`)) {
            axios.delete(`http://localhost:8080/FuelCost/deleteFuelCost/${fuelId}`)
                .then(() => alert("Fuel cost deleted successfully!"))
                .catch((error) => {
                    console.error("Error deleting Fuel cost:", error);
                    alert("Failed to delete cost.");
                });
        }
    }

    if (loading) return <p>Loading truck costs...</p>;
    if (error) return <p className="fuelError">{error}</p>;

    //Navigate to edit fuel page
    function EditCost(costID) {
        navigate(`/EditFuelCost/${costID}`);
    }

    //Total of all costs
    function calculateTotal(data) {
        return data.reduce((sum, cost) => sum + parseFloat(cost.FuelCost), 0).toFixed(2);
    }

    //generate overall report
    function generateFullReport() {
        const doc = new jsPDF();
        doc.text("Greenguard E-waste Management - Fuel Cost Report", 14, 15);

        const headers = [["Truck Number", "Fuel Date", "Fuel Type", "Fuel Cost", "Litres", "Status"]];
        const data = truckFuelCosts.map(cost => [
            cost.Truck_RegNum,
            cost.Fuel_Date,
            cost.FuelType,
            cost.FuelCost,
            cost.Litres,
            cost.Status
        ]);

        autoTable(doc, {
            head: headers,
            body: data,
            startY: 20,
            headStyles: {
                fillColor: [0, 153, 76], // Green headers
                textColor: [255, 255, 255],
                halign: 'center'
            },
            alternateRowStyles: {
                fillColor: [245, 245, 245]
            },
            styles: {
                fontSize: 10
            }
        });

        const totalCost = calculateTotal(truckFuelCosts);
        const finalY = doc.lastAutoTable.finalY || 30;
        doc.setFontSize(11);
        doc.text(`Total Fuel Cost: Rs. ${totalCost}`, 14, finalY + 10);
        doc.setFontSize(10);
        doc.setTextColor(150);
        doc.text("Generated by Truck Manager", 14, doc.internal.pageSize.height - 10);

        doc.save("Fuel_Cost_Report.pdf");
    }

    //Generate report for past one month
    function generateLastMonthReport() {
        const oneMonthAgo = new Date();
        oneMonthAgo.setDate(oneMonthAgo.getDate() - 30);

        const recentCosts = truckFuelCosts.filter(cost => {
            const costDate = new Date(cost.Fuel_Date);
            return costDate >= oneMonthAgo;
        });

        const doc = new jsPDF();
        doc.text("Greenguard E-waste Management - Fuel Cost Report - Last 1 Month", 14, 15);

        const headers = [["Truck Number", "Fuel Date", "Fuel Type", "Fuel Cost", "Litres", "Status"]];
        const data = recentCosts.map(cost => [
            cost.Truck_RegNum,
            cost.Fuel_Date,
            cost.FuelType,
            cost.FuelCost,
            cost.Litres,
            cost.Status
        ]);

        autoTable(doc, {
            head: headers,
            body: data,
            startY: 20,
            headStyles: {
                fillColor: [0, 153, 76],
                textColor: [255, 255, 255],
                halign: 'center'
            },
            alternateRowStyles: {
                fillColor: [245, 245, 245]
            },
            styles: {
                fontSize: 10
            }
        });

        const totalCost = calculateTotal(recentCosts);
        const finalY = doc.lastAutoTable.finalY || 30;
        doc.setFontSize(11);
        doc.text(`Total Fuel Cost: Rs. ${totalCost}`, 14, finalY + 10);
        doc.setFontSize(10);
        doc.setTextColor(150);
        doc.text("Generated by Greenguard Management", 14, doc.internal.pageSize.height - 10);

        doc.save("Fuel_Cost_Report_Last_30_Days.pdf");
    }

    return (
        <div className="fuelContainer">
            <div className="fuelHeaderSection">
                <BackBtn />
                <h2 className="fuelTitle">Truck Fuel Cost Details</h2>
            </div>

            <table className="fuelCostTable">
                <thead>
                    <tr>
                        <th className="fuelHeader">Truck Number</th>
                        <th className="fuelHeader">Fuel Date</th>
                        <th className="fuelHeader">Fuel Type</th>
                        <th className="fuelHeader">Fuel Cost</th>
                        <th className="fuelHeader">Litres</th>
                        <th className="fuelHeader">Status</th>
                        <th className="fuelHeader">Action</th>
                    </tr>
                </thead>
                <tbody>
                    {truckFuelCosts.length > 0 ? (
                        truckFuelCosts.map((FuelCost) => (
                            <tr key={FuelCost._id}>
                                <td>{FuelCost.Truck_RegNum}</td>
                                <td>{FuelCost.Fuel_Date}</td>
                                <td>{FuelCost.FuelType}</td>
                                <td>{FuelCost.FuelCost}</td>
                                <td>{FuelCost.Litres}</td>
                                <td className="fuelStatusCell">{FuelCost.Status}</td>
                                <td>
                                    <button className="fuelCostEditBtn" onClick={() => EditCost(FuelCost._id)}>Edit</button>
                                    <button className="fuelDeleteBtn" onClick={() => deleteFuelCost(FuelCost._id, FuelCost.Truck_RegNum)}>Delete</button>
                                </td>
                            </tr>
                        ))
                    ) : (
                        <tr>
                            <td colSpan="7" className="fuelNoData">No costs found.</td>
                        </tr>
                    )}
                </tbody>
            </table>

            <button className="VF-generateBtn2" onClick={generateFullReport}>Generate Report</button>
            <button className="VF-generateBtn3" onClick={generateLastMonthReport}>Generate past 1 month Report</button>
        </div>
    );
}

export default ViewFuelCost;

